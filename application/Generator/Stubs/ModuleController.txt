<?php

namespace __moduleNamespace__\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\Validator;
use Inertia\Inertia;
use __moduleNamespace__\Models\__moduleNameSingular__;
__moduleRelationshipNamespaces__

class __moduleNameSingular__Controller extends Controller
{
    public function index()
    {
        abort_if(Gate::denies('__moduleNamePluralLower__.view'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        $view_data = [];
        __moduleIndexData__

        return $this->render('Index', $view_data);
    }

    public function render($component, $props)
    {
        return Inertia::render('__moduleDirectoryForViews__/' . $component, $props);
    }

    public function create()
    {
        abort_if(Gate::denies('__moduleNameSingularLower__.create'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        $view_data = [];
__moduleCreateData__

        return $this->render('Create', $view_data);
    }

    public function edit($id)
    {
        abort_if(Gate::denies('__moduleNameSingularLower__.edit'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        $view_data = [];
__moduleEditData__

        return $this->render('Edit', $view_data);
    }

    public function show($id)
    {
        abort_if(Gate::denies('__moduleNameSingularLower__.view'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        $view_data = [];
__moduleShowData__

        return $this->render('Detail', $view_data);
    }

    public function store(Request $request)
    {
        abort_if(Gate::denies('__moduleNameSingularLower__.create'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        $rules = [__moduleCreateRules__];
        $data = $request->all();
        Validator::make($data, $rules)->validate();

        $data = $request->all();
        $__moduleNameSingularLower__ = __moduleNameSingular__::create($data);

        return redirect()->back()
            ->with('message', '__moduleNameSingularLower__ Created Successfully.');
    }

    public function update(Request $request)
    {
        abort_if(Gate::denies('__moduleNameSingularLower__.edit'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        $rules = ['id' => ['required'], __moduleUpdateRules__];
        Validator::make($request->all(), $rules)->validate();

        if ($request->has('id')) {
            __moduleNameSingular__::find($request->input('id'))->update($request->all());

            return redirect()->back()
                ->with('message', '__moduleNameSingular__ Updated Successfully.');
        }
    }

    public function destroy(Request $request)
    {
        abort_if(Gate::denies('__moduleNameSingularLower__.delete'), Response::HTTP_FORBIDDEN, '403 Forbidden');

        if ($request->has('id')) {
            __moduleNameSingular__::find($request->input('id'))->delete();

            return redirect()->back();
        }
    }
}
